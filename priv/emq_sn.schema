%%-*- mode: erlang -*-
%% emq_sn config mapping
{mapping, "mqtt.sn.port", "emq_sn.listener", [
  {default, 1884},
  {datatype, integer}
]}.

{mapping, "mqtt.sn.advertise_duration", "emq_sn.advertise_duration", [
  {default, 900},
  {datatype, integer}
]}.

{mapping, "mqtt.sn.gateway_id", "emq_sn.gateway_id", [
  {default, 1},
  {datatype, integer}
]}.

{mapping, "mqtt.sn.username", "emq_sn.username", [
  {datatype, string}
]}.

{mapping, "mqtt.sn.password", "emq_sn.password", [
  {datatype, string}
]}.

{mapping, "mqtt.sn.enable_stats", "emq_sn.enable_stats", [
  {datatype, flag}
]}.

{mapping, "mqtt.sn.predefined.$id.topicname", "emq_sn.predefined", [
  {datatype, string}
]}.

{mapping, "mqtt.sn.predefined.$id.topicid", "emq_sn.predefined", [
  {datatype, integer}
]}.

{translation, "emq_sn.listener", fun(Conf) ->
  Port = cuttlefish:conf_get("mqtt.sn.port", Conf),
  {Port, []}
end}.


{translation, "emq_sn.username", fun(Conf) ->
  Username = cuttlefish:conf_get("mqtt.sn.username", Conf),
  list_to_binary(Username)
end}.

{translation, "emq_sn.password", fun(Conf) ->
  Password = cuttlefish:conf_get("mqtt.sn.password", Conf),
  list_to_binary(Password)
end}.

{translation, "emq_sn.predefined", fun(Conf) ->
    List = cuttlefish_variable:filter_by_prefix("mqtt.sn.predefined", Conf),
    TopicIdList = [TopicId || {_, TopicId} <- lists:sort([{I, TopicId} || {["mqtt", "sn", "predefined", I,"topicid"], TopicId} <- List])],
    TopicNameList = [iolist_to_binary(TopicName) || {_, TopicName} <-
                      lists:sort([{I, TopicName} || {["mqtt", "sn", "predefined", I, "topicname"], TopicName} <- List])],
    lists:zip(TopicIdList, TopicNameList)
end}.

